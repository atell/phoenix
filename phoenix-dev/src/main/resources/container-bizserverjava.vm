package com.dianping.phoenix.container;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import org.apache.log4j.Logger;
import org.mortbay.jetty.Server;
import org.mortbay.jetty.webapp.WebAppContext;
import com.dianping.phoenix.router.hotdeploy.classloader.PhoenixClassLoader;

public class BizServer {
	private static final String PORT_KEY = "bizserver.port";
	private static final Logger log = Logger.getLogger(BizServer.class);

	public static void main(String[] args) throws Exception {
		Properties prop = loadProperties();
		Server server = new Server(Integer.valueOf(prop.getProperty(PORT_KEY,
				"8080")));

		for (String key : prop.stringPropertyNames()) {
			if (!PORT_KEY.equals(key)) {
				File projectDir = new File(prop.getProperty(key));
				File webXml = new File(projectDir,
						"src/main/webapp/WEB-INF/web.xml");
				if (!webXml.exists()) {
					log.error(String.format("%s does not exist",
							webXml.getAbsolutePath()));
				} else {
					log.info(String.format("add %s to web context path %s",
							projectDir, key));
					addContext(server, projectDir, key, true);
				}
			}
		}

		addContext(server, new File("."), "/", false);

		server.start();
		System.in.read();
		server.stop();
	}

	private static void addContext(Server server, File projectDir, String path,
			boolean hotReDeploy) throws IOException {

		if (!path.startsWith("/")) {
			throw new RuntimeException("web context path should start with /");
		}

		File warRoot = new File(projectDir, "src/main/webapp/");
		WebAppContext context = new WebAppContext();
		context.setContextPath(path);
		context.setDescriptor(new File(warRoot, "WEB-INF/web.xml").getPath());
		context.setResourceBase(warRoot.getAbsolutePath());

		if (hotReDeploy) {
			PhoenixClassLoader pcl = new PhoenixClassLoader(
					projectDir.getAbsoluteFile(), 2000, context,
					BizServer.class.getClassLoader());
			if ("/_user-web".equals(path)) {
				File wsDir = projectDir.getParentFile();
				pcl.addClassPath(new File(wsDir,
						"user-service/user-remote/target/classes/")
						.getAbsolutePath());
				pcl.addClassPath(new File(wsDir,
						"user-base-service/user-base-remote/target/classes/")
						.getAbsolutePath());
			}

			if ("/_user-service".equals(path)) {
				File wsDir = projectDir.getParentFile().getParentFile();
				pcl.addClassPath(new File(wsDir,
						"user-service/user-remote/target/classes/")
						.getAbsolutePath());
				pcl.addClassPath(new File(wsDir,
						"user-base-service/user-base-remote/target/classes/")
						.getAbsolutePath());
			}

			if ("/_user-base-service".equals(path)) {
				File wsDir = projectDir.getParentFile().getParentFile();
				pcl.addClassPath(new File(wsDir,
						"user-base-service/user-base-remote/target/classes/")
						.getAbsolutePath());
			}

			context.setClassLoader(pcl);
		}

		server.addHandler(context);
	}

	private static Properties loadProperties() throws IOException {
		Properties prop = new Properties();
		InputStream input = null;
		try {
			input = BizServer.class
					.getResourceAsStream("/bizServer.properties");
			if (input != null) {
				prop.load(input);
			}
			return prop;
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException e) {
				}
			}
		}
	}
}