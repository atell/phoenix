package com.dianping.phoenix.container;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.apache.log4j.Logger;
import org.mortbay.jetty.Server;
import org.mortbay.jetty.webapp.WebAppContext;

/**
 * 
 * WARNING: THIS FILE IS AUTOGENERATED BY MAVEN PLUGIN. PLEASE DO NOT CHECK IT
 * IN TO GIT OR SVN.
 * 
 */
public class PhoenixServer {
    private static final String PORT_KEY = "bizserver.port";
    private static final Logger log      = Logger.getLogger(PhoenixServer.class);

    public static void main(String[] args) throws Exception {
        if (args == null || args.length == 0) {
            System.out.println("You should start PhoenixServer with 1 argument(router.war dir)");
        }
        Properties prop = loadProperties();
        Server server = new Server(Integer.valueOf(prop.getProperty(PORT_KEY, "8080")));

        for (String key : prop.stringPropertyNames()) {
            if (!PORT_KEY.equals(key)) {
                File projectDir = new File(prop.getProperty(key));
                File webXml = new File(projectDir, "WEB-INF/web.xml");
                if (!webXml.exists()) {
                    log.error(String.format("%s does not exist", webXml.getAbsolutePath()));
                } else {
                    log.info(String.format("add %s to web context path %s", projectDir, key));
                    addContext(server, projectDir, key);
                }
            }
        }

        addContext(server, new File(args[0]), "/");

        server.start();
    }

    private static void addContext(Server server, File warRoot, String path) throws IOException {

        if (!path.startsWith("/")) {
            throw new RuntimeException("web context path should start with /");
        }

        WebAppContext context = new WebAppContext();
        context.setContextPath(path);
        context.setDescriptor(new File(warRoot, "WEB-INF/web.xml").getPath());
        context.setResourceBase(warRoot.getAbsolutePath());

        server.addHandler(context);
    }

    private static Properties loadProperties() throws IOException {
        Properties prop = new Properties();
        InputStream input = null;
        try {
            input = PhoenixServer.class.getResourceAsStream("/phoenix.xml");
            if (input != null) {
                prop.loadFromXML(input);
            }
            return prop;
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                }
            }
        }
    }
}