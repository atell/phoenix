package com.dianping.phoenix.container;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.FileFilterUtils;
import org.apache.commons.io.filefilter.TrueFileFilter;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.mortbay.jetty.Server;
import org.mortbay.jetty.webapp.WebAppContext;
import org.w3c.dom.NodeList;

import com.dianping.phoenix.router.hotdeploy.classloader.PhoenixClassLoader;

/**
 * 
 * WARNING: THIS FILE IS AUTOGENERATED BY MAVEN PLUGIN. PLEASE DO NOT CHECK IT
 * IN TO GIT OR SVN.
 * 
 */
public class PhoenixServer {
	private static final String PORT_KEY = "bizserver.port";
	private static final Logger log = Logger.getLogger(PhoenixServer.class);

	public static void main(String[] args) throws Exception {
		Properties prop = loadProperties();
		Server server = new Server(Integer.valueOf(prop.getProperty(PORT_KEY, "8080")));

		Map<String, String> projectPathMapping = listProjectPathMapping(new File("").getAbsoluteFile().getParentFile());

		Map<String, List<String>> projectDenpendencies = listProjectDependencies(prop, projectPathMapping);

		for (String key : prop.stringPropertyNames()) {
			if (!PORT_KEY.equals(key)) {
				File projectDir = new File(prop.getProperty(key));
				File webXml = new File(projectDir, "src/main/webapp/WEB-INF/web.xml");
				if (!webXml.exists()) {
					log.error(String.format("%s does not exist", webXml.getAbsolutePath()));
				} else {
					log.info(String.format("add %s to web context path %s", projectDir, key));
					addContext(server, projectDir, key, true, projectDenpendencies);
				}
			}
		}

		addContext(server, new File("."), "/", false, projectDenpendencies);

		server.start();
		System.in.read();
		server.stop();
		System.exit(0);
	}

	@SuppressWarnings("unchecked")
	private static Map<String, String> listProjectPathMapping(File dir) throws Exception {
		Map<String, String> res = new HashMap<String, String>();

		Collection<File> poms = FileUtils.listFiles(dir, FileFilterUtils.nameFileFilter("pom.xml"),
				TrueFileFilter.INSTANCE);
		for (File pom : poms) {
			NodeList nodes = findNodesInXML(pom, "/project/artifactId/text()");
			if (nodes.getLength() >= 1) {
				String artifactId = nodes.item(0).getNodeValue();
				if (StringUtils.isNotBlank(artifactId)) {
					res.put(artifactId, pom.getParentFile().getAbsoluteFile().getAbsolutePath());
				}
			}
		}

		return res;
	}

	private static NodeList findNodesInXML(File file, String xpathExpr) throws Exception {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		factory.setFeature("http://xml.org/sax/features/namespaces", false);
		factory.setFeature("http://xml.org/sax/features/validation", false);
		factory.setFeature("http://apache.org/xml/features/nonvalidating/load-dtd-grammar", false);
		factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		XPathExpression expr = XPathFactory.newInstance().newXPath().compile(xpathExpr);
		return (NodeList) expr.evaluate(factory.newDocumentBuilder().parse(file), XPathConstants.NODESET);
	}

	private static Map<String, List<String>> listProjectDependencies(Properties bizServerProp,
			Map<String, String> projectPathMapping) throws Exception {
		Map<String, List<String>> res = new HashMap<String, List<String>>();

		for (String contextPath : bizServerProp.stringPropertyNames()) {
			File classPathFile = new File(bizServerProp.getProperty(contextPath), ".classpath");

			NodeList nodes = findNodesInXML(classPathFile, "//classpathentry[@kind='src']");

			for (int i = 0; i < nodes.getLength(); i++) {
				String nodeValue = nodes.item(i).getAttributes().getNamedItem("path").getNodeValue();
				if (nodeValue.startsWith("/")) {
					String projectName = nodeValue.substring(1);
					if (projectPathMapping.containsKey(projectName)) {
						if (!res.containsKey(contextPath)) {
							res.put(contextPath, new ArrayList<String>());
						}
						File classesPath = new File(projectPathMapping.get(projectName), "/target/classes");
						if (classesPath.exists() && classesPath.isDirectory()) {
							res.get(contextPath).add(classesPath.getAbsolutePath());
						}
					}

				}
			}

		}

		return res;
	}

	private static void addContext(Server server, File projectDir, String path, boolean hotReDeploy,
			Map<String, List<String>> projectDenpendencies) throws IOException {

		if (!path.startsWith("/")) {
			throw new RuntimeException("web context path should start with /");
		}

		File warRoot = new File(projectDir, "src/main/webapp/");
		WebAppContext context = new WebAppContext();
		context.setContextPath(path);
		context.setDescriptor(new File(warRoot, "WEB-INF/web.xml").getPath());
		context.setResourceBase(warRoot.getAbsolutePath());

		if (hotReDeploy) {
			PhoenixClassLoader pcl = new PhoenixClassLoader(projectDir.getAbsoluteFile(), 2000, context,
					PhoenixServer.class.getClassLoader());
			if (projectDenpendencies.containsKey(path)) {
				for (String classPath : projectDenpendencies.get(path)) {
					pcl.addClassPath(classPath);
					log.info(String.format("%s add class path %s for project dependency", path, classPath));
				}
			}

			context.setClassLoader(pcl);
		}

		server.addHandler(context);
	}

	private static Properties loadProperties() throws IOException {
		Properties prop = new Properties();
		InputStream input = null;
		try {
			input = PhoenixServer.class.getResourceAsStream("/phoenix.properties");
			if (input != null) {
				prop.load(input);
			}
			return prop;
		} finally {
			if (input != null) {
				try {
					input.close();
				} catch (IOException e) {
				}
			}
		}
	}
}